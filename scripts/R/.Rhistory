floh_strict = sum( segment_gn_frac[ total_raw < strict_loh_lim ] ),
frac_subclonal = sum(segment_gn_frac[ is_subclonal ]),
frac_tight_50_CCF_subclonal = sum(segment_gn_frac[ is_tight_50CCF ]),
frac_tight_clonal = sum(segment_gn_frac[ is_tight_clonal ]),
N_segments = .N,
integer_offset = unique(integer_offset),
biggest_homdel_Mb = ifelse( any(total_raw < homdel_lim), max(segment_len[total_raw < homdel_lim]) / 1000000, 0)),
by = get(sample_col) ]
setnames(out, c('get'), c(sample_col))
return( out )
}
source_dir <- 'C:/Users/lw748/OneDrive - University of Cambridge/sWGS/QDNASeq_and_model_training/RASCAL/github_rascal/results/SLX-10722_SLX-11823.D701_D506'
seg_files <- paste0(source_dir, '/absolute_segments_binsize_500.copy_number_segmented_output.csv')
segs <- fread( seg_files )
# match columns to expected by code
setnames(segs, 'absolute_copy_number', 'cnTotal')
# Calculate metrics per region-------------------------------------------------------------------------------------------------------------
## Calculate metrics based on CN data alone ##
# To run per solution with the same functions temporarily modify the sample column
segs[, sample_sol := paste(sample, ploidy, cellularity, sep = ':')]
segs[, sample_id := sample ]
segs[, sample := sample_sol ] # for code expected inputs (should really change the function)
segs[, segment_len := end - start + 1 ]
segs[, num_gds := ifelse(ploidy < 2.7, 0, ifelse(ploidy < 3.5, 1, 2))]
# Caluclate metrics
sample_qc_metrics <- assess_solution( segs )
setnames(sample_qc_metrics, 'sample', 'sample_sol')
cin_metrics <- calc.wgii( segs, input = 'auto_qc' )
# make a goodness of fit score
# average deviation from interger (limited to 0.2 max) - as per Vanloo et al ASCAT paper
segs[, int_deviation := abs(cnTotal - round(cnTotal)) ]
segs[, int_deviation_scaled := (1 - (ifelse(int_deviation > 0.2, 0.2, int_deviation)/0.2))*100 ]
gof <- segs[, .(goodness_of_fit = sum(int_deviation_scaled * segment_len) / sum(segment_len)), by = sample_sol ]
# Bind together
cn_qc <- cbind( sample_qc_metrics,
cin_metrics[, c("gii", "wgii")],
gof[,c("goodness_of_fit")],
unique(segs[,.(sample = sample_id, ploidy, purity = cellularity, num_gds)]) )
# make a logical order
cn_qc <- cn_qc[, c(15, 1:14, 16:18)]
# Choose a solution ufor each region -------------------------------------------------------------------------------------
# Rule out solutions that are biologically implausible #
cn_qc[, `:=`( homdel_size_fail = biggest_homdel_Mb > qclim_biggest_homdel_Mb,
homdel_frac_fail = frac_homdel > qclim_frac_gn_homdel,
loh_fail = floh_strict / gii < qclim_LOH_gII_ratio,
purity_fail = purity < qclim_purity | purity > qclim_purity_low_wGII_cn_pass & wgii < qclim_wGII_high_purity_cn_pass ) ]
cn_qc[, bio_plausible_sol := !( homdel_size_fail | homdel_frac_fail | loh_fail | purity_fail ) ]
# Now lets make a solution score for the solutions
# Lets adjust the fraction of gn with tight 50% CCF (indicating solution needs doubling) by how much noise there is (non tight subclonal CN)
# scale this score by number of GDs. If 0 GD called then this score shouldn't be used as its a check for GD samples. Also more concnered about this
# score if we've got 2 rather than 1 GDs as should be conservative on number of GDs where possible (hence (1 / (num_gds + 1)))
# squaring and X50 is abirtary to make the change in score of a reaonable scale compared to the other factors going into the score
cn_qc[, frac_subclonal_tight50CCF := frac_tight_50_CCF_subclonal / (1-frac_tight_clonal) ]
cn_qc[, frac_subclonal_tight50CCF := ifelse( frac_subclonal_tight50CCF > 1, 1, frac_subclonal_tight50CCF )]
cn_qc[, extra_int_score := frac_subclonal_tight50CCF ^ 2 * 50 * (1 / (num_gds + 1)) ]
# Prevents NA (can happen with very poor solutions but everything needs a score)
cn_qc[ is.na(extra_int_score), extra_int_score := 1 ]
# Add punishment for missing CN states
# Do this on a log scale so that 0.001 is punished much more than 0.01
# But don't allow it punish more than 0.6 (equivilent to 0.001 frac odd)
cn_qc[, frac_at_odd_lim := ifelse(frac_at_odd < 0.001, 0.001, frac_at_odd) ]
cn_qc[, missing_cn_score := -(log10(frac_at_odd_lim) - log10(0.1 * num_gds)) * 10  ]
cn_qc[ missing_cn_score < 0 , missing_cn_score := 0 ]
# Round missing/extra integer scores to nearest 5% so that choices between reasonable solutions will be mostly made on goodness of fit
cn_qc[, solution_fit_score := goodness_of_fit -
round(extra_int_score * 5) / 5 -
round(missing_cn_score * 5) / 5  ]
# Then select solution based on score after ruling out all bad solutions
cn_qc[ (bio_plausible_sol),
selected_solution_auto := sample_sol == sample_sol[ solution_fit_score == max(solution_fit_score[ bio_plausible_sol ], na.rm=T) ][1],
by = sample ]
# Lets flag chosen solutions that look a bit dodgy for manual review -----------------------------------------------------------------------
cn_qc[ (selected_solution_auto), flag_goodness_of_fit := goodness_of_fit < flaglim_allele_fit ]
cn_qc[ (selected_solution_auto), flag_segmentation := N_segments > flaglim_n_segments ]
cn_qc[ (selected_solution_auto), flag_poor_solution :=  flag_segmentation | flag_goodness_of_fit ]
# Write out
data.table::fwrite(cn_qc, paste0(source_dir, "/auto_solution_choice.tsv"), sep = "\t")
View(gof)
View(segs)
source_dir <- 'C:/Users/lw748/OneDrive - University of Cambridge/sWGS/QDNASeq_and_model_training/RASCAL/github_rascal/results/SLX-10722_SLX-11823.D701_D506'
seg_files <- paste0(source_dir, '/absolute_segments_binsize_500.copy_number_segmented_output.csv')
segs <- fread( seg_files )
View(segs)
# match columns to expected by code
setnames(segs, 'absolute_copy_number', 'cnTotal')
# match columns to expected by code
setnames(segs, 'absolute_copy_number', 'cnTotal')
View(segs)
segs[, sample_sol := paste(sample, ploidy, cellularity, sep = ':')]
View(segs)
segs[, sample_id := sample ]
View(segs)
segs[, sample := sample_sol ] # for code expected inputs (should really change the function)
View(segs)
segs[, segment_len := end - start + 1 ]
View(segs)
segs[, num_gds := ifelse(ploidy < 2.7, 0, ifelse(ploidy < 3.5, 1, 2))]
View(segs)
# Caluclate metrics
sample_qc_metrics <- assess_solution( segs )
View(sample_qc_metrics)
setnames(sample_qc_metrics, 'sample', 'sample_sol')
View(sample_qc_metrics)
cin_metrics <- calc.wgii( segs, input = 'auto_qc' )
View(cin_metrics)
ake a goodness of fit score
segs[, int_deviation := abs(cnTotal - round(cnTotal)) ]
segs[, int_deviation_scaled := (1 - (ifelse(int_deviation > 0.2, 0.2, int_deviation)/0.2))*100 ]
gof <- segs[, .(goodness_of_fit = sum(int_deviation_scaled * segment_len) / sum(segment_len)), by = sample_sol ]
View(gof)
View(sample_qc_metrics)
cn_qc <- cbind( sample_qc_metrics,
cin_metrics[, c("gii", "wgii")],
gof[,c("goodness_of_fit")],
unique(segs[,.(sample = sample_id, ploidy, purity = cellularity, num_gds)]) )
View(cn_qc)
View(cn_qc)
source('relative_to_absolute_given_para.R')
# List all _output.csv files in the input directory
file_list <- list.files(input_dir, pattern = "binsize_500.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
input_dir <- '/path/to/_output.csv/'
#input_dir <- "C:/Users/lw748/OneDrive - University of Cambridge/sWGS/QDNASeq_and_model_training/RASCAL/github_rascal/results/SLX-10722_SLX-11823.D701_D504"
# Set the ploidy and cellularity values
# ploidy_list <- seq(1, 4, by=0.5)
# cellularity_list <- seq(0.05, 1, by=0.05)
ploidy_list <- seq(2, 3, by=0.5)
cellularity_list <- seq(0.05, 0.15, by=0.05)
# List all _output.csv files in the input directory
file_list <- list.files(input_dir, pattern = "binsize_500.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
# Apply the function to each file
ab_copy_number <- lapply(file_list, function(file_path) {
relative_to_absolute_given_para(file_path, ploidy_list, cellularity_list)
})
ab_copy_number
file_list
input_dir <- "C:/Users/lw748/OneDrive - University of Cambridge/sWGS/QDNASeq_and_model_training/RASCAL/github_rascal/results/SLX-10722_SLX-11823.D701_D504"
# Set the ploidy and cellularity values
# ploidy_list <- seq(1, 4, by=0.5)
# cellularity_list <- seq(0.05, 1, by=0.05)
ploidy_list <- seq(2, 3, by=0.5)
cellularity_list <- seq(0.05, 0.15, by=0.05)
# List all _output.csv files in the input directory
file_list <- list.files(input_dir, pattern = "binsize_500.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
file_list
# List all _output.csv files in the input directory
file_list <- list.files(input_dir, pattern = '"^binsize_500.copy_number_segmented_output\\.csv$"', full.names = TRUE, recursive = TRUE)
file_list
# List all _output.csv files in the input directory
file_list <- list.files(input_dir, pattern = '"^binsize_500\\.copy_number_segmented_output\\.csv$"', full.names = TRUE, recursive = TRUE)
file_list
# List all _output.csv files in the input directory
file_list <- list.files(input_dir, pattern = "^binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
file_list
# Apply the function to each file
ab_copy_number <- lapply(file_list, function(file_path) {
relative_to_absolute_given_para(file_path, ploidy_list, cellularity_list)
})
ab_copy_number
#Save the results in bin-size
output_path_copy_number <- paste0(dirname(input_file), '/absolute_2', basename(input_file))
input_dir <- "C:/Users/lw748/OneDrive - University of Cambridge/sWGS/QDNASeq_and_model_training/RASCAL/github_rascal/results/SLX-10722_SLX-11823.D701_D504"
# Set the ploidy and cellularity values
# ploidy_list <- seq(1, 4, by=0.5)
# cellularity_list <- seq(0.05, 1, by=0.05)
ploidy_list <- seq(2, 3, by=0.5)
cellularity_list <- seq(0.05, 0.15, by=0.05)
# List all _output.csv files in the input directory
file_list <- list.files(input_dir, pattern = "^binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
# Apply the function to each file
ab_copy_number <- lapply(file_list, function(file_path) {
relative_to_absolute_given_para(file_path, ploidy_list, cellularity_list)
#Save the results in bin-size
output_path_copy_number <- paste0(file_path, '_absolute_2', basename(input_file))
write.csv(ab_copy_number, output_path_copy_number, row.names = FALSE)
#Save the results in segments
results_df_segments <- copy_number_segments_modified_from_rascal(ab_copy_number)
output_path_segmented <- paste0(file_path, '_absolute_segments_2', basename(input_file))
write.csv(results_df_segments, output_path_segmented, row.names = FALSE)
})
ab_copy_number <- lapply(file_list, function(file_path) {
relative_to_absolute_given_para(file_path, ploidy_list, cellularity_list)
#Save the results in bin-size
output_path_copy_number <- paste0(file_path, '_absolute_2')
write.csv(ab_copy_number, output_path_copy_number, row.names = FALSE)
#Save the results in segments
results_df_segments <- copy_number_segments_modified_from_rascal(ab_copy_number)
output_path_segmented <- paste0(file_path, '_absolute_segments_2')
write.csv(results_df_segments, output_path_segmented, row.names = FALSE)
})
ab_copy_number <- lapply(file_list, function(file_path) {
relative_to_absolute_given_para(file_path, ploidy_list, cellularity_list)
#Save the results in bin-size
output_path_copy_number <- paste0(dirname(file_path), '/absolute_2', basename(file_path))
write.csv(ab_copy_number, output_path_copy_number, row.names = FALSE)
#Save the results in segments
results_df_segments <- copy_number_segments_modified_from_rascal(ab_copy_number)
output_path_segmented <- paste0(dirname(file_path), '/absolute_segments_2', basename(file_path))
write.csv(results_df_segments, output_path_segmented, row.names = FALSE)
})
typeof(ab_copy_number)
return(results_df)
ab_copy_number
#Save the results in segments
ab_copy_number <- as.data.frame(do.call(cbind, ab_copy_number))
ab_copy_number
View(ab_copy_number)
results_df_segments <- copy_number_segments_modified_from_rascal(ab_copy_number)
output_path_segmented <- paste0(dirname(file_path), '/absolute_segments_2', basename(file_path))
ab_copy_number <- lapply(file_list, function(file_path) {
relative_to_absolute_given_para(file_path, ploidy_list, cellularity_list)
#Save the results in bin-size
output_path_copy_number <- paste0(dirname(file_path), '/absolute_2', basename(file_path))
write.csv(ab_copy_number, output_path_copy_number, row.names = FALSE)
#Save the results in segments
ab_copy_number <- as.data.frame(do.call(cbind, ab_copy_number))
results_df_segments <- copy_number_segments_modified_from_rascal(ab_copy_number)
output_path_segmented <- paste0(dirname(file_path), '/absolute_segments_2', basename(file_path))
write.csv(results_df_segments, output_path_segmented, row.names = FALSE)
})
source('relative_to_absolute_given_para.R')
#input_dir <- '/path/to/_output.csv/'
input_dir <- "C:/Users/lw748/OneDrive - University of Cambridge/sWGS/QDNASeq_and_model_training/RASCAL/github_rascal/results/SLX-10722_SLX-11823.D701_D504"
# Set the ploidy and cellularity values
# ploidy_list <- seq(1, 4, by=0.5)
# cellularity_list <- seq(0.05, 1, by=0.05)
ploidy_list <- seq(2, 3, by=0.5)
cellularity_list <- seq(0.05, 0.15, by=0.05)
# List all _output.csv files in the input directory
file_list <- list.files(input_dir, pattern = "^binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
# Apply the function to each file
results_list <- lapply(file_list, function(file_path) {
relative_to_absolute_given_para(file_path, ploidy_list, cellularity_list)
})
for (i in seq_along(results_list)) {
results <- results_list[[i]]
output_path_copy_number <- paste0(dirname(file_list[i]), '/absolute_2', basename(file_list[i]))
output_path_segmented <- paste0(dirname(file_list[i]), '/absolute_segments_2', basename(file_list[i]))
write.csv(results$results_df, output_path_copy_number, row.names = FALSE)
write.csv(results$results_df_segments, output_path_segmented, row.names = FALSE)
}
results_list
seq_along(results_list)
results_list[[1]]
results$results_df_segments
source('relative_to_absolute_given_para.R')
#input_dir <- '/path/to/_output.csv/'
input_dir <- "C:/Users/lw748/OneDrive - University of Cambridge/sWGS/QDNASeq_and_model_training/RASCAL/github_rascal/results/SLX-10722_SLX-11823.D701_D504"
# Set the ploidy and cellularity values
# ploidy_list <- seq(1, 4, by=0.5)
# cellularity_list <- seq(0.05, 1, by=0.05)
ploidy_list <- seq(2, 3, by=0.5)
cellularity_list <- seq(0.05, 0.15, by=0.05)
# List all _output.csv files in the input directory
file_list <- list.files(input_dir, pattern = "^binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
# Apply the function to each file
results_list <- lapply(file_list, function(file_path) {
relative_to_absolute_given_para(file_path, ploidy_list, cellularity_list)
})
for (i in seq_along(results_list)) {
results <- results_list[[i]]
output_path_copy_number <- paste0(dirname(file_list[i]), '/absolute_2', basename(file_list[i]))
output_path_segmented <- paste0(dirname(file_list[i]), '/absolute_segments_2', basename(file_list[i]))
write.csv(results$results_df, output_path_copy_number, row.names = FALSE)
write.csv(results$results_df_segments, output_path_segmented, row.names = FALSE)
}
source('auto_qc.R')
source('relative_to_absolute_given_para.R')
source('auto_qc.R')
#input_dir <- '/path/to/_output.csv/'
input_dir <- "C:/Users/lw748/OneDrive - University of Cambridge/sWGS/QDNASeq_and_model_training/RASCAL/github_rascal/results"
ploidy_list <- seq(2, 3, by=0.5)
cellularity_list <- seq(0.05, 0.15, by=0.05)
# List all _output.csv files in the input directory
file_list <- list.files(input_dir, pattern = "^binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
# Apply the function to each file
results_list <- lapply(file_list, function(file_path) {
relative_to_absolute_given_para(file_path, ploidy_list, cellularity_list)
})
#Save the results in bin-size and in segments
for (i in seq_along(results_list)) {
results <- results_list[[i]]
output_path_copy_number <- paste0(dirname(file_list[i]), '/absolute_', basename(file_list[i]))
output_path_segmented <- paste0(dirname(file_list[i]), '/absolute_segments_', basename(file_list[i]))
write.csv(results$results_df, output_path_copy_number, row.names = FALSE)
write.csv(results$results_df_segments, output_path_segmented, row.names = FALSE)
}
#Select the best solution------------------------------------------------------------------------------------------------------------
seg_file_list <- list.files(input_dir, pattern = "^absolute_segments_binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
seg_file_list
source('auto_qc.R')
seg_file_list <- list.files(input_dir, pattern = "^absolute_segments_binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
results_list <- lapply(seg_file_list, function(file_path) {
cn_qc <- select_best_solution(file_path)
# Write out
data.table::fwrite(cn_qc, paste0(dirname(file_path), "/auto_solution_choice.tsv"), sep = "\t")
})
seg_file_list <- list.files(input_dir, pattern = "^absolute_segments_binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
results_list <- lapply(seg_file_list, function(file_path) {
cn_qc <- select_best_solution(file_path)
# Write out
data.table::fwrite(cn_qc, paste0(dirname(file_path), "/auto_solution_choice_2.tsv"), sep = "\t")
})
source('relative_to_absolute_given_para.R')
source('auto_qc.R')
#input_dir <- '/path/to/_output.csv/'
input_dir <- "C:/Users/lw748/OneDrive - University of Cambridge/sWGS/QDNASeq_and_model_training/RASCAL/github_rascal/results"
#convert relative cna from QDNASeq to absolute using manually set solutions------------------------------------------------------------------------------
# Set the ploidy and cellularity values
ploidy_list <- seq(1, 8, by=0.5)
cellularity_list <- seq(0.05, 1, by=0.05)
#ploidy_list <- seq(2, 3, by=0.5)
#cellularity_list <- seq(0.05, 0.15, by=0.05)
# List all _output.csv files in the input directory
file_list <- list.files(input_dir, pattern = "^binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
# Apply the function to each file
results_list <- lapply(file_list, function(file_path) {
relative_to_absolute_given_para(file_path, ploidy_list, cellularity_list)
})
#Save the results in bin-size and in segments
for (i in seq_along(results_list)) {
results <- results_list[[i]]
output_path_copy_number <- paste0(dirname(file_list[i]), '/absolute_', basename(file_list[i]))
output_path_segmented <- paste0(dirname(file_list[i]), '/absolute_segments_', basename(file_list[i]))
write.csv(results$results_df, output_path_copy_number, row.names = FALSE)
write.csv(results$results_df_segments, output_path_segmented, row.names = FALSE)
}
#Select the best solution------------------------------------------------------------------------------------------------------------
seg_file_list <- list.files(input_dir, pattern = "^absolute_segments_binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
results_list <- lapply(seg_file_list, function(file_path) {
cn_qc <- select_best_solution(file_path)
# Write out
data.table::fwrite(cn_qc, paste0(dirname(file_path), "/auto_solution_choice_2.tsv"), sep = "\t")
})
### END ----------------------------------------------------------------------------------------------------------------------------------
results_list
results_list
cn_qc
seg_file_list
seg_file_list <- list.files(input_dir, pattern = "^absolute_segments_binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
lapply(seg_file_list, function(file_path) {
cn_qc <- select_best_solution(file_path)
print(cn_qc)
print(length(cn_qc))
# Write out
data.table::fwrite(cn_qc, paste0(dirname(file_path), "/auto_solution_choice_2.tsv"), sep = "\t")
print('============')
})
source('auto_qc.R')
#print(cn_qc)
#print(length(cn_qc))
# Write out
data.table::fwrite(cn_qc, paste0(dirname(file_path), "/auto_solution_choice_2.tsv"), sep = "\t")
#Select the best solution------------------------------------------------------------------------------------------------------------
seg_file_list <- list.files(input_dir, pattern = "^absolute_segments_binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
lapply(seg_file_list, function(file_path) {
cn_qc <- select_best_solution(file_path)
#print(cn_qc)
#print(length(cn_qc))
# Write out
data.table::fwrite(cn_qc, paste0(dirname(file_path), "/auto_solution_choice_2.tsv"), sep = "\t")
print('============')
})
### END ----------------------------------------------------------------------------------------------------------------------------------
source('auto_qc.R')
#Select the best solution------------------------------------------------------------------------------------------------------------
seg_file_list <- list.files(input_dir, pattern = "^absolute_segments_binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
lapply(seg_file_list, function(file_path) {
cn_qc <- select_best_solution(file_path)
#print(cn_qc)
#print(length(cn_qc))
# Write out
data.table::fwrite(cn_qc, paste0(dirname(file_path), "/auto_solution_choice_2.tsv"), sep = "\t")
print('============')
})
### END ----------------------------------------------------------------------------------------------------------------------------------
source('relative_to_absolute_given_para.R')
source('auto_qc.R')
#input_dir <- '/path/to/_output.csv/'
input_dir <- "C:/Users/lw748/OneDrive - University of Cambridge/sWGS/QDNASeq_and_model_training/RASCAL/github_rascal/results"
#convert relative cna from QDNASeq to absolute using manually set solutions------------------------------------------------------------------------------
# Set the ploidy and cellularity values
ploidy_list <- seq(1, 8, by=0.2)
cellularity_list <- seq(0.05, 1, by=0.02)
#ploidy_list <- seq(2, 3, by=0.5)
#cellularity_list <- seq(0.05, 0.15, by=0.05)
# List all _output.csv files in the input directory
file_list <- list.files(input_dir, pattern = "^binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
# Apply the function to each file
results_list <- lapply(file_list, function(file_path) {
relative_to_absolute_given_para(file_path, ploidy_list, cellularity_list)
})
#Save the results in bin-size and in segments
for (i in seq_along(results_list)) {
results <- results_list[[i]]
output_path_copy_number <- paste0(dirname(file_list[i]), '/absolute_', basename(file_list[i]))
output_path_segmented <- paste0(dirname(file_list[i]), '/absolute_segments_', basename(file_list[i]))
write.csv(results$results_df, output_path_copy_number, row.names = FALSE)
write.csv(results$results_df_segments, output_path_segmented, row.names = FALSE)
}
#Select the best solution------------------------------------------------------------------------------------------------------------
seg_file_list <- list.files(input_dir, pattern = "^absolute_segments_binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
lapply(seg_file_list, function(file_path) {
cn_qc <- select_best_solution(file_path)
# Write out
data.table::fwrite(cn_qc, paste0(dirname(file_path), "/auto_solution_choice_2.tsv"), sep = "\t")
print('============')
})
### END ----------------------------------------------------------------------------------------------------------------------------------
libraray(rascal)
library(rascal)
find_acceptable_solutions <- function(relative_copy_numbers, weights = NULL,
min_ploidy = 1.1, max_ploidy = 5.5, ploidy_step = 0.01,
min_cellularity = 0.01, max_cellularity = 1.0, cellularity_step = 0.01,
distance_function = c("MAD", "RMSD"),
distance_filter_scale_factor = 1.25,
max_proportion_zero = 0.05,
min_proportion_close_to_whole_number = 0.5,
max_distance_from_whole_number = 0.15,
solution_proximity_threshold = 5,
keep_all = FALSE) {
# compute distance function for grid-based range of ploidies and cellularities
distances <- absolute_copy_number_distance_grid(
relative_copy_numbers, weights,
min_ploidy, max_ploidy, ploidy_step,
min_cellularity, max_cellularity, cellularity_step,
distance_function)
# add identifier for each solution to help with marking up the best fit
# solutions if returning all solutions
distances <- distances %>%
mutate(id = row_number())
# find minima, i.e. those grid points which have a smaller distance than all
# adjacent points
distances <- distances %>%
mutate(x = dense_rank(cellularity)) %>%
mutate(y = dense_rank(ploidy))
solutions <- select(distances, id, x, y, distance)
for (xdelta in -1:1) {
for (ydelta in -1:1) {
if (xdelta != 0 || ydelta != 0) {
solutions <- solutions %>%
mutate(xc = x + xdelta, yc = y + ydelta) %>%
left_join(select(distances, xc = x, yc = y, dc = distance), by = c("xc", "yc")) %>%
filter(is.na(dc) | distance <= dc) %>%
select(id, x, y, distance)
}
}
}
distances <- select(distances, -x, -y)
solutions <- solutions %>%
select(id) %>%
left_join(distances, by = "id")
# only retain solutions with distances no more than
# distance_filter_scale_factor times the the minimum value
if (is.numeric(distance_filter_scale_factor) && nrow(solutions) > 1) {
solutions <- solutions %>%
filter(distance < distance_filter_scale_factor * min(distance))
}
# retain solutions with acceptable ploidies and cellularities
solutions <- solutions %>%
rowwise() %>%
filter(
is_acceptable_ploidy_and_cellularity(
ploidy, cellularity,
relative_copy_numbers, weights,
max_proportion_zero = max_proportion_zero,
min_proportion_close_to_whole_number = min_proportion_close_to_whole_number,
max_distance_from_whole_number = max_distance_from_whole_number
)
) %>%
ungroup()
return(solutions)
}
source('find_accepatbel_solutions.R')
source('find_acceptable_solutions.R')
file_list <- list.files(input_dir, pattern = "^binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
# Apply the function to each file
solution_list <- lapply(file_list, function(file_path) {
relative_copy_numbers <- fread(file_path)
find_acceptable_solutions()
})
# Apply the function to each file
solution_list <- lapply(file_list, function(file_path) {
relative_copy_numbers <- fread(file_path)
find_acceptable_solutions(relative_copy_numbers)
})
relative_copy_numbers
file_list <- list.files(input_dir, pattern = "^binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
relative_copy_numbers <- fread(file_list[1])
View(relative_copy_numbers)
class(relative_copy_numbers$copy_number)
class(relative_copy_numbers$segmented)
rlang::last_trace()
rlang::last_trace(drop = FALSE)
str(relative_copy_numbers)
relative_copy_numbers[, c("start", "end") := lapply(.SD, as.numeric), .SDcols = c("start", "end")]
str(relative_copy_numbers)
solution_list <- lapply(file_list, function(file_path) {
relative_copy_numbers <- fread(file_path)
# Convert start and end columns to numeric
relative_copy_numbers[, c("start", "end") := lapply(.SD, as.numeric), .SDcols = c("start", "end")]
find_acceptable_solutions(relative_copy_numbers)
})
rlang::last_trace()
rlang::last_trace(drop = FALSE)
file_list <- list.files(input_dir, pattern = "^binsize_500\\.copy_number_segmented_output\\.csv$", full.names = TRUE, recursive = TRUE)
# Apply the function to each file
solution_list <- lapply(file_list, function(file_path) {
relative_copy_numbers <- fread(file_path)
# Convert start and end columns to numeric
find_acceptable_solutions(relative_copy_numbers$segmented)
})
solution_list
